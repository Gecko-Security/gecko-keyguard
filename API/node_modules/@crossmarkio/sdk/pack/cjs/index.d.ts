/// <reference types="node" />
import * as _crossmarkio_typings_build_src_schema_v3_apps from '@crossmarkio/typings/build/src/schema/v3/apps';
import EventEmitter from 'events';
import * as typings from '@crossmarkio/typings/sdk';
export { typings };
import * as _crossmarkio_typings_build_src_crossmark_models_verify from '@crossmarkio/typings/build/src/crossmark/models/verify';
import * as _crossmarkio_typings_build_src_crossmark_models_version from '@crossmarkio/typings/build/src/crossmark/models/version';
import * as _crossmarkio_typings_build_src_crossmark_models_isLocked from '@crossmarkio/typings/build/src/crossmark/models/isLocked';
import * as _crossmarkio_typings_build_src_crossmark_models_bulkSignAndSubmit from '@crossmarkio/typings/build/src/crossmark/models/bulkSignAndSubmit';
import * as _crossmarkio_typings_build_src_crossmark_models_bulkSubmit from '@crossmarkio/typings/build/src/crossmark/models/bulkSubmit';
import * as _crossmarkio_typings_build_src_crossmark_models_bulkSign from '@crossmarkio/typings/build/src/crossmark/models/bulkSign';
import * as _crossmarkio_typings_build_src_crossmark_models_signAndSubmit from '@crossmarkio/typings/build/src/crossmark/models/signAndSubmit';
import * as _crossmarkio_typings_build_src_crossmark_models_submit from '@crossmarkio/typings/build/src/crossmark/models/submit';
import * as _crossmarkio_typings_build_src_crossmark_models_sign from '@crossmarkio/typings/build/src/crossmark/models/sign';
import * as _crossmarkio_typings_build_src_crossmark_models_signIn from '@crossmarkio/typings/build/src/crossmark/models/signIn';
import * as _crossmarkio_typings_build_src_schema_v3 from '@crossmarkio/typings/build/src/schema/v3';

interface ActiveRequest {
    resolve: (value: unknown) => void;
    reject: (value: unknown) => void;
}
declare class Api extends EventEmitter {
    #private;
    sdk: Sdk;
    active: Map<string, ActiveRequest>;
    uuid: string;
    connected: boolean;
    target: string | undefined;
    timestamp: number | undefined;
    constructor(sdk: Sdk);
    awaitRequest: (request: Partial<typings.Models.Request>) => Promise<typings.Models.FullResponse>;
    request: (request: Partial<typings.Models.Request>) => string;
}

declare class Env {
    isAndroid: boolean;
    isIos: boolean;
    isOpera: boolean;
    isWindows: boolean;
    isSSR: boolean;
    isXApp: boolean;
    isMobile: boolean;
    isDesktop: boolean;
    constructor();
}

declare interface CustomEmitter {
    on(event: typeof typings.EVENTS.PING, listener: () => void): this;
    on(event: typeof typings.EVENTS.CLOSE, listener: () => void): this;
    on(event: typeof typings.EVENTS.OPEN, listener: () => void): this;
    on(event: typeof typings.EVENTS.SIGNOUT, listener: () => void): this;
    on(event: typeof typings.EVENTS.USER_CHANGE, listener: (user: typeof typings.BasicUser) => void): this;
    on(event: typeof typings.EVENTS.NETWORK_CHANGE, listener: (network: typeof typings.BasicNetwork) => void): this;
    on(event: typeof typings.EVENTS.RESPONSE, listener: (resp: typings.Models.Response) => void): this;
    on(event: typeof typings.EVENTS.ALL, listener: (all: typeof typings.CatchAllEvent) => void): this;
    on(event: string, listener: Function): this;
}
declare class CustomEmitter extends EventEmitter {
}

type crossmark = Api;
declare global {
    interface Window {
        xrpl: {
            isCrossmark?: boolean;
            crossmark: Api;
        };
        crossmark: Sdk;
    }
}

declare interface Mount {
    on(event: 'detected', listener: () => void): this;
    on(event: string, listener: Function): this;
}
declare class Mount extends EventEmitter {
    isCrossmark?: boolean;
    crossmark: crossmark | undefined;
    sdk: Sdk;
    constructor(sdk: Sdk);
    loop: (timeout?: number) => Promise<boolean>;
}

declare const enum State {
    active = "active",
    unactive = "unactive",
    error = "error"
}
declare class Session {
    sdk: Sdk;
    user?: typeof typings.BasicUser;
    network?: typeof typings.BasicNetwork;
    address?: string;
    isOpen: boolean;
    lastPing?: number;
    state: State;
    responses: Map<string, typings.Models.FullResponse>;
    constructor(sdk: Sdk);
    handleDetect: () => Promise<void>;
    handlePing: () => number;
    handleClose: () => boolean;
    handleOpen: () => boolean;
    handleSignOut: () => void;
    handleNetworkChange: (network: {
        network: typeof typings.BasicNetwork;
    }) => void;
    handleUserChange: (user: {
        user: typeof typings.BasicUser;
    }) => void;
    handleResponse: (resp: typings.Models.FullResponse) => void;
}

declare class Async {
    sdk: Sdk;
    api: Api;
    session: Session;
    mount: Mount;
    constructor(sdk: Sdk);
    signInAndWait: (hex?: string) => Promise<_crossmarkio_typings_build_src_crossmark_models_signIn.SignInFullResponse>;
    signAndWait: (tx: typeof typings.Models.AllTransactionRequest, opts?: typeof typings.Models.ExtendedSignOpts) => Promise<_crossmarkio_typings_build_src_crossmark_models_sign.SignFullResponse>;
    submitAndWait: (address: string, txblob: string, opts?: typeof typings.Models.ExtendedSignOpts) => Promise<_crossmarkio_typings_build_src_crossmark_models_submit.SubmitFullResponse>;
    signAndSubmitAndWait: (tx: typeof typings.Models.AllTransactionRequest, opts?: typeof typings.Models.ExtendedSignOpts) => Promise<_crossmarkio_typings_build_src_crossmark_models_signAndSubmit.SignAndSubmitFullResponse>;
    bulkSignAndWait: (txns: (typeof typings.Models.IndexedTransactionRequest)[], opts?: typeof typings.Models.ExtendedSignOpts) => Promise<_crossmarkio_typings_build_src_crossmark_models_bulkSign.BulkSignFullResponse>;
    bulkSubmitAndWait: (address: string, txblobs: string[], opts?: typeof typings.Models.ExtendedSignOpts) => Promise<_crossmarkio_typings_build_src_crossmark_models_bulkSubmit.BulkSubmitFullResponse>;
    bulkSignAndSubmitAndWait: (txns: (typeof typings.Models.IndexedTransactionRequest)[], opts?: typeof typings.Models.ExtendedSignOpts) => Promise<_crossmarkio_typings_build_src_crossmark_models_bulkSignAndSubmit.BulkSignAndSubmitFullResponse>;
    isLockedAndWait: () => Promise<_crossmarkio_typings_build_src_crossmark_models_isLocked.IsLockedFullResponse>;
    versionAndWait: () => Promise<_crossmarkio_typings_build_src_crossmark_models_version.VersionFullResponse>;
    verifyAndWait: (hex: string) => Promise<_crossmarkio_typings_build_src_crossmark_models_verify.VerifyFullResponse>;
}

declare class Sync {
    sdk: Sdk;
    api: Api;
    session: Session;
    mount: Mount;
    constructor(sdk: Sdk);
    signIn: (hex?: string) => string;
    sign: (tx: typeof typings.Models.AllTransactionRequest, opts?: typeof typings.Models.ExtendedSignOpts) => string;
    submit: (address: string, txblob: string, opts?: typeof typings.Models.ExtendedSignOpts) => string;
    signAndSubmit: (tx: typeof typings.Models.AllTransactionRequest, opts?: typeof typings.Models.ExtendedSignOpts) => string;
    bulkSign: (txns: (typeof typings.Models.IndexedTransactionRequest)[], opts?: typeof typings.Models.ExtendedSignOpts) => string;
    bulkSubmit: (address: string, txblobs: string[], opts?: typeof typings.Models.ExtendedSignOpts) => string;
    bulkSignAndSubmit: (txns: (typeof typings.Models.IndexedTransactionRequest)[], opts?: typeof typings.Models.ExtendedSignOpts) => string;
    getResponse: (id: string) => typings.Models.FullResponse | undefined;
    connect: (timeout?: number) => Promise<boolean>;
    isConnected: () => boolean | undefined;
    isLocked: () => string;
    isOpen: () => boolean;
    version: () => string;
    verify: (hex: string) => string;
    getAddress: () => string | undefined;
    getNetwork: () => _crossmarkio_typings_build_src_schema_v3.Types.BasicNetwork | undefined;
    getUser: () => _crossmarkio_typings_build_src_schema_v3.Types.BasicUser | undefined;
}

interface Opts {
    project: typeof typings.Config.config.title;
}
declare class Sdk extends CustomEmitter {
    mount: Mount;
    api: Api;
    session: Session;
    env: Env;
    async: Async;
    sync: Sync;
    methods: Async & Sync;
    app: _crossmarkio_typings_build_src_schema_v3_apps.Apps.titles;
    constructor(opts?: Opts);
}

declare const _default$2: Sdk;

declare const _default$1: Sdk;

declare namespace index_d {
  export { _default$1 as embark, _default$2 as xmark };
}

declare const _default: Sdk;

export { _default as default, index_d as modules, Sdk as vanilla };
